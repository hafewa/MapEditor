// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace Example
{
    public partial class Vector2i
    {
        public int X { get; set; }

        public int Y { get; set; }

    }

    public partial class Vector3f
    {
        public float X { get; set; }

        public float Y { get; set; }

        public float Z { get; set; }

    }

    public partial class Vector2f
    {
        public float X { get; set; }

        public float Y { get; set; }

    }

    public partial class RectF
    {
        public float X { get; set; }

        public float Y { get; set; }

        public float Width { get; set; }

        public float Height { get; set; }

    }

    /// <summary>	物品动态信息-由程序维护</summary>
    public partial class Item
    {
        public enum ItemType
        {
            /// <summary>	无效值当背包格子无物品时将设置此值</summary>
            NONE = 0,
            /// <summary>	道具</summary>
            GOODS = 1,
            /// <summary>	装备</summary>
            EQUIPMENT = 2,
            /// <summary>拼图</summary>
            PUZZLE = 3,
        }

        /// <summary>	类型</summary>
        public Example.Item.ItemType Type { get; set; }

        /// <summary>	物品id, 如果为GOODS为ItemInfo->id. EQUIPMENT为动态ID.</summary>
        public int Id { get; set; }

        /// <summary>	物品数量</summary>
        public int Count { get; set; }

        /// <summary>	是否已经绑定</summary>
        public bool Binded { get; set; }

    }

    /// <summary>	物品静态信息表-由策划配置</summary>
    public partial class ItemInfo
    {
        public enum ItemInfoType
        {
            /// <summary>	常规</summary>
            COMMON = 0,
            /// <summary>	装备</summary>
            EQUIP = 1,
            /// <summary>	宝石</summary>
            GEMSTONE = 2,
            /// <summary>	货币</summary>
            COIN = 3,
            /// <summary>	任务道具</summary>
            TASK = 4,
            /// <summary>  其他</summary>
            ITEMINFO_OTHER = 5,
        }

        public enum ItemChildTypeCOMMON
        {
            /// <summary>	礼包</summary>
            GIFT = 0,
            /// <summary>	药品</summary>
            DRUGS = 1,
            /// <summary>	材料</summary>
            MATERIAL = 2,
            /// <summary>	功能</summary>
            FUN = 3,
        }

        public enum ItemChildTypeEQUIP
        {
            WEAPON = 0,
            HEAD = 1,
            CLOTH = 2,
            CUFF = 3,
            BELT = 4,
            SHOE = 5,
            JADE = 6,
            NECKLACE = 7,
            RING = 8,
            BRACELET = 9,
            CLOAK = 10,
        }

        public enum ItemBindType
        {
            /// <summary>	非绑定</summary>
            NOT_BIND = 0,
            /// <summary>	永久绑定</summary>
            FOREVER = 1,
            /// <summary>	条件绑定</summary>
            CONDITION = 2,
        }

        public enum ItemQuality
        {
            /// <summary>	白</summary>
            WHIITE = 0,
            /// <summary>	绿</summary>
            GREEN = 1,
            /// <summary>	蓝</summary>
            BLUE = 2,
            /// <summary>	紫</summary>
            PURPLE = 3,
            /// <summary>	橙</summary>
            ORANGE = 4,
        }

        public enum ItemOfftakeCoin
        {
            /// <summary>	元宝</summary>
            INGOT = 0,
            /// <summary>	金币</summary>
            GOLD = 1,
            /// <summary>	银币</summary>
            SILVER = 2,
        }

        public enum ItemUseProfession
        {
            /// <summary>	无限制</summary>
            NOT_PROFESSSION = 0,
            CLF = 1,
            GNJ = 2,
            HB = 3,
            SLJ = 4,
            SJY = 5,
        }

        public enum ItemUseSex
        {
            /// <summary>	无限制</summary>
            NOT_SEX = 0,
            /// <summary>	男</summary>
            MAN = 1,
            /// <summary>	女</summary>
            WOMAN = 2,
        }

        public enum ItemUseLimit
        {
            /// <summary>	无限制</summary>
            NOT_USE = 0,
            /// <summary>	战斗限制</summary>
            BATTLE = 1,
            /// <summary>	地图限制</summary>
            MAP = 2,
        }

        public enum ItemUseFun
        {
            /// <summary>	无效果</summary>
            NOT_FUN = 0,
            /// <summary>	加血</summary>
            ADDHP = 1,
            /// <summary>	加蓝</summary>
            ADDMP = 2,
        }

        public enum ItemInvalidFun
        {
            /// <summary>	使用后消失</summary>
            USE_CLEAR = 0,
            /// <summary>	自动消失</summary>
            AUTO_CLEAR = 1,
        }

        public enum ItemInvalidTimeUnit
        {
            /// <summary>	分钟</summary>
            MINUTE = 0,
            /// <summary>	天</summary>
            DAY = 1,
            /// <summary>	周</summary>
            WEEK = 2,
            /// <summary>	月</summary>
            MONTH = 3,
        }

        public enum DropNoticeChannel
        {
            NOTICE_NONE = 0,
            NOTICE_ALL = 1,
            NOTICE_FAMILY = 2,
            NOTICE_FRIEND = 3,
            NOTICE_ALL_FAMILY_FRIEND = 4,
        }

        /// <summary>	道具ID</summary>
        public int Id { get; set; }

        /// <summary>	名字</summary>
        public string Name { get; set; }

        /// <summary>	道具类型</summary>
        public Example.ItemInfo.ItemInfoType itemInfoType { get; set; }

        /// <summary>	道具子类型</summary>
        public int ChildType { get; set; }

        /// <summary>	排序 从小到大, 越小越靠近背包的左上角</summary>
        public int Sort { get; set; }

        /// <summary>	类型描述</summary>
        public string Typedesc { get; set; }

        /// <summary>	客户端描述</summary>
        public string Clientdesc { get; set; }

        /// <summary>	核心描述</summary>
        public string Coredesc { get; set; }

        /// <summary>	功能描述</summary>
        public string Fundesc { get; set; }

        /// <summary>	图标</summary>
        public string Icon1 { get; set; }

        public string Icon2 { get; set; }

        /// <summary>	绑定方式</summary>
        public Example.ItemInfo.ItemBindType BindType { get; set; }

        /// <summary>	使用等级下限</summary>
        public int UseLevelDown { get; set; }

        /// <summary>	人物拥有最大个数</summary>
        public int MaxCount { get; set; }

        /// <summary>	最大叠加</summary>
        public int MaxSuperPosition { get; set; }

        /// <summary>	失效日期 yyyy-MM-dd_HH:mm:ss 24小时制</summary>
        public string ExpiryDate { get; set; }

        /// <summary>	卖出货币类型</summary>
        public Example.ItemInfo.ItemOfftakeCoin OfftakeCoin { get; set; }

        /// <summary>	卖出货币数量(价格)</summary>
        public int OfftakeCoinCount { get; set; }

        /// <summary>	是否可以分享</summary>
        public bool Share { get; set; }

        /// <summary>	是否可以自动使用</summary>
        public bool Autouse { get; set; }

        /// <summary>	是否可以出售商会</summary>
        public bool SellShop { get; set; }

        /// <summary>	是否可以存仓库</summary>
        public bool WareHouse { get; set; }

        /// <summary>	是否可以摆摊</summary>
        public bool Pitch { get; set; }

        /// <summary>	最大使用次数</summary>
        public int MaxUseCount { get; set; }

        /// <summary>	职业限制</summary>
        public Example.ItemInfo.ItemUseProfession UseProfession { get; set; }

        /// <summary>	使用性别 ture 男 false 女</summary>
        public Example.ItemInfo.ItemUseSex UseSex { get; set; }

        /// <summary>	使用限制</summary>
        public Example.ItemInfo.ItemUseLimit UseLimit { get; set; }

        /// <summary>	使用限制参数1</summary>
        public int LimitParam1 { get; set; }

        /// <summary>	使用限制参数2</summary>
        public int LimitParam2 { get; set; }

        /// <summary>	物品使用效果</summary>
        public Example.ItemInfo.ItemUseFun UseFun { get; set; }

        /// <summary>	物品功能参数-1</summary>
        public string UseFunParam1 { get; set; }

        /// <summary>	物品功能参数-2</summary>
        public string UseFunParam2 { get; set; }

        /// <summary>	物品功能参数-3</summary>
        public string UseFunParam3 { get; set; }

        /// <summary>	掉落ID</summary>
        public int DropOutId { get; set; }

        /// <summary>	失效后效果</summary>
        public Example.ItemInfo.ItemInvalidFun itemInvalidFun { get; set; }

        /// <summary>	失效时间单位</summary>
        public Example.ItemInfo.ItemInvalidTimeUnit itemInvalidTimeUnit { get; set; }

        /// <summary>	失效时间数值</summary>
        public int ItemInvalidTimeData { get; set; }

        /// <summary>	使用等级上限</summary>
        public int UseLevelUp { get; set; }

        /// <summary>	物品品质</summary>
        public Example.ItemInfo.ItemQuality Quality { get; set; }

        /// <summary> 掉落公告频道</summary>
        public Example.ItemInfo.DropNoticeChannel dropNoticeChannel { get; set; }

        /// <summary> 掉落公告Key</summary>
        public int DropNoticeKey { get; set; }

        /// <summary> 补充ID</summary>
        public int SupplementID { get; set; }

    }

    public partial class AllItemInfos
    {
        public Example.AllStringID StringID { get; set; }

        public List<Example.ItemInfo> Iteminfos { get; set; }

    }

    public partial class AnimationFrameActionValue
    {
        public Example.Vector3f VectorValue { get; set; }

        public string StrValue { get; set; }

        public int IntValue { get; set; }

        public float FloatValue { get; set; }

    }

    public partial class AnimationFrameAction
    {
        public enum ActionType
        {
            NONE = 0,
            PLAY_ACTION = 4,
            STOP_ACTION = 5,
            SHOW_EFFECT = 6,
            HIDE_EFFECT = 7,
            BRAKE = 8,
        }

        public Example.AnimationFrameAction.ActionType actionType { get; set; }

        public List<Example.AnimationFrameActionValue> Args { get; set; }

    }

    public partial class MapAnimationFrame
    {
        public enum RelativeType
        {
            ABSOLUTE = 0,
            RELATIVE = 1,
        }

        public int Duration { get; set; }

        public List<Example.AnimationFrameAction> Actions { get; set; }

        public Example.MapAnimationFrame.RelativeType PositionType { get; set; }

        public Example.Vector3f Position { get; set; }

        public Example.MapAnimationFrame.RelativeType RotationType { get; set; }

        public Example.Vector3f Rotation { get; set; }

        public Example.MapAnimationFrame.RelativeType ScaleType { get; set; }

        public Example.Vector3f Scale { get; set; }

        public bool Navigation { get; set; }

    }

    public partial class MapAnimation
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public int Duration { get; set; }

        public List<Example.MapAnimationFrame> Frames { get; set; }

    }

    public partial class MapStoryBoard
    {
        public int Id { get; set; }

        public List<Example.MapAnimation> Animations { get; set; }

        public int BeginEventID { get; set; }

        public int EndEventID { get; set; }

    }

    /// <summary>	地图编辑器生成</summary>
    public partial class TransmitNode
    {
        /// <summary>	跳转点ID, 名字空间是MapUnit</summary>
        public int Id { get; set; }

        /// <summary>	到哪个地图， 对应MapUnit</summary>
        public int Map { get; set; }

        /// <summary>	这个是到哪个地图的哪个TransmitNode的索引.</summary>
        public int Node { get; set; }

        /// <summary>	跳转点位置, 直接用值无需对应.</summary>
        public Example.Vector3f Position { get; set; }

        public int JumpGroup { get; set; }

        public string Eff { get; set; }

        public Example.Vector3f Rotation { get; set; }

    }

    public partial class JumpNode
    {
        public int Next { get; set; }

        public Example.Vector3f Position { get; set; }

        public Example.Vector3f Rotation { get; set; }

        public float CameraDistance { get; set; }

        public int Time { get; set; }

        public bool UniformSpeed { get; set; }

        public int Delay { get; set; }

        public string AnimBegin { get; set; }

        public string AnimMove { get; set; }

        public string AnimOver { get; set; }

        public Example.Vector3f TowardDir { get; set; }

        public int AnimBeginTime { get; set; }

    }

    public partial class JumpGroup
    {
        public int Id { get; set; }

        public List<Example.JumpNode> JumpNodes { get; set; }

    }

    /// <summary>	NPCUnit, 地图编辑器生成</summary>
    public partial class NPCUnit
    {
        /// <summary>	对应NPC表的索引</summary>
        public int ResID { get; set; }

        /// <summary>	初始点</summary>
        public Example.Vector3f Position { get; set; }

        /// <summary>	初始朝向</summary>
        public Example.Vector3f Rotation { get; set; }

        /// <summary>	我的阵营</summary>
        public int SelfFaction { get; set; }

        /// <summary>
        /// <para>	友方阵营</para>
        /// <para>	friendFaction | 对方的.selfFaction > 0 为友方</para>
        /// </summary>
        public int FriendFaction { get; set; }

        public int NpcID { get; set; }

        public int NpcGroupId { get; set; }

        /// <summary> 出生动画</summary>
        public Example.MapAnimation BornAnimation { get; set; }

        /// <summary> 死亡动画</summary>
        public Example.MapAnimation DieAnimation { get; set; }

    }

    public partial class NPCPass
    {
        /// <summary>	1000</summary>
        public int DelayTime { get; set; }

        /// <summary>	MapUnit -> npcs 的 index</summary>
        public List<int> Npcs { get; set; }

    }

    public partial class NPCGroup
    {
        /// <summary>	倒计时时间	5000</summary>
        public int DelayTime { get; set; }

        public List<Example.NPCPass> Passes { get; set; }

        /// <summary>	PASS出完之后进入到下一个组, 没有的时候为-1</summary>
        public int NextGroup { get; set; }

    }

    public partial class ScenePathNodeContext
    {
        public int Cid { get; set; }

        public float Cost { get; set; }

    }

    public partial class ScenePathNode
    {
        public enum PathNodeType
        {
            PNT_NORMAL = 0,
            PNT_TRANSMIT = 1,
            PNT_KEY = 2,
        }

        public int Id { get; set; }

        public Example.Vector3f Pos { get; set; }

        public List<Example.ScenePathNodeContext> AdjacentNodes { get; set; }

        public Example.ScenePathNode.PathNodeType Type { get; set; }

    }

    public partial class ScenePath
    {
        public List<Example.ScenePathNode> Nodes { get; set; }

    }

    public partial class FlyingAction
    {
        public enum Type
        {
            NONE = 0,
            PLAY_ACTION = 1,
            PLAY_EFFECT = 2,
            PLAY_SKILL = 3,
            SPEED_CHANGE = 4,
            SHOW_BUTTON = 5,
        }

        public int Id { get; set; }

        public Example.FlyingAction.Type Action { get; set; }

        public List<string> Args { get; set; }

    }

    public partial class FlyingPoint
    {
        public int Id { get; set; }

        public Example.Vector3f Position { get; set; }

        public List<Example.FlyingAction> Action { get; set; }

    }

    public partial class FlyingPath
    {
        public int Id { get; set; }

        public List<Example.FlyingPoint> Points { get; set; }

    }

    /// <summary>	说明地图上的单位, 地图编辑器生成</summary>
    public partial class MapUnit
    {
        /// <summary>	有一个偏移量, 用作开始索引, 偏移量左侧为客户端用. 暂定为10</summary>
        public int Id { get; set; }

        /// <summary>	客户端用加载地图资源</summary>
        public string ResID { get; set; }

        /// <summary>	地图上所有的NPC</summary>
        public List<Example.NPCUnit> Npcs { get; set; }

        /// <summary>	跳转点集合</summary>
        public List<Example.TransmitNode> TransmitNodes { get; set; }

        /// <summary>	地图上用户可以选择阵营</summary>
        public List<int> PlaySelfFactions { get; set; }

        /// <summary>	地图上用户可以选择友方阵营</summary>
        public List<int> PlayFriendFactions { get; set; }

        /// <summary>	NPC 出现规则, 有一个触发条件.</summary>
        public List<Example.NPCGroup> Groups { get; set; }

        /// <summary>	轻功点集合</summary>
        public List<Example.JumpGroup> JumpGroups { get; set; }

        /// <summary>	事件传播条件</summary>
        public List<Example.EventCondition> EventCondition { get; set; }

        /// <summary>	事件数据记录、传播</summary>
        public List<Example.EventData> EventData { get; set; }

        public Example.ScenePath ScenePath { get; set; }

        /// <summary>	动画列表</summary>
        public List<Example.MapAnimation> Animations { get; set; }

        public List<Example.FlyingPath> FlyingPaths { get; set; }

    }

    public partial class MapOpenPolicy
    {
        public enum OpenType
        {
            OT_NONE = 0,
            /// <summary>	等级</summary>
            OT_LEVEL = 1,
            /// <summary>	完成任务</summary>
            OT_MISSON = 2,
        }

        /// <summary>	副本开启条件类型</summary>
        public List<Example.MapOpenPolicy.OpenType> OpenTypes { get; set; }

        /// <summary>	副本开启条件值</summary>
        public List<int> OpenValues { get; set; }

    }

    public partial class MapEnterPolicy
    {
        /// <summary>	副本等级下限</summary>
        public int MinPlayerLevel { get; set; }

        /// <summary>	副本等级上限</summary>
        public int MaxPlayerLevel { get; set; }

        /// <summary>	队伍人数下限</summary>
        public int MinTeamMember { get; set; }

        /// <summary>	队伍人数上限</summary>
        public int MaxTeamMember { get; set; }

        /// <summary>	副本最大人数上限</summary>
        public int MaxPlayerCount { get; set; }

        /// <summary>	进入副本消耗</summary>
        public List<Example.Item> Consume { get; set; }

        /// <summary>	击杀了这个boss后，将不可再组其他人进来</summary>
        public int StopTeamBossID { get; set; }

    }

    public partial class MapLimit
    {
        /// <summary>是否可骑乘</summary>
        public bool CanRide { get; set; }

        /// <summary>是否可踢人</summary>
        public bool CanKick { get; set; }

        /// <summary>是否可接受召唤</summary>
        public bool CanApplySummon { get; set; }

        /// <summary>是否可组建队伍</summary>
        public bool CanFormTream { get; set; }

        /// <summary>是否可技能传送</summary>
        public bool CanSkillTransmit { get; set; }

        /// <summary>是否可改变关系</summary>
        public bool CanChangeRelation { get; set; }

    }

    public partial class MapAssistPolicy
    {
        public enum AssistType
        {
            /// <summary>	不需要助战</summary>
            NONE = 1,
            /// <summary>	先上去n个，死了任何一个再补1个</summary>
            DELAY = 2,
            /// <summary>	全部都上去;</summary>
            ALL_AT_ONCE = 3,
        }

        public Example.MapAssistPolicy.AssistType Type { get; set; }

        public int InitCount { get; set; }

        public int TotalCount { get; set; }

    }

    public partial class MapRelivePolicy
    {
        public enum RevivePunish
        {
            /// <summary>无惩罚</summary>
            RP_NONE = 0,
            /// <summary>血量</summary>
            RP_HP = 1,
            /// <summary>元宝</summary>
            RP_GOLD = 2,
        }

        /// <summary>复活次数</summary>
        public int ReviveNum { get; set; }

        /// <summary>复活惩罚</summary>
        public Example.MapRelivePolicy.RevivePunish revivePunish { get; set; }

        /// <summary>复活倒计时</summary>
        public int ReviveTimer { get; set; }

        /// <summary>复活惩罚参数</summary>
        public int PunishValue { get; set; }

    }

    public partial class MapClearPolicy
    {
        public enum OverCondition
        {
            /// <summary>	副本事件</summary>
            OC_MAP_EVENT = 0,
            /// <summary>	击杀指定id的BOSS</summary>
            OC_KILL_BOSS = 1,
            /// <summary>	收集道具</summary>
            OC_COLLECT_ITEM = 2,
            /// <summary>	护送NPC到指定位置</summary>
            OC_NPC_POSITION = 3,
            /// <summary>	存活时间</summary>
            OC_ALIVETIME = 4,
            /// <summary>	守护NPC存活时间</summary>
            OC_NPC_ALIVETIME = 5,
            /// <summary>	到达指定位置</summary>
            OC_POSITION = 6,
            /// <summary>	阻止怪物到达指定位置</summary>
            OC_PREVENT_NPC_POSITION = 7,
        }

        public List<Example.MapClearPolicy.OverCondition> ConditionTypes { get; set; }

        public List<int> ConditionValues { get; set; }

        /// <summary> 通关奖励，关联掉落表id</summary>
        public int DropID { get; set; }

    }

    public partial class MapEvaluatePolicy
    {
        public enum EvaluateType
        {
            /// <summary>时间</summary>
            E_TIME = 0,
            /// <summary>杀死NPC数量</summary>
            E_KILLNPCNUM = 1,
            /// <summary>己方死亡数量</summary>
            E_FRIENDDIENUM = 2,
        }

        /// <summary> 评分类型</summary>
        public Example.MapEvaluatePolicy.EvaluateType evaluateType { get; set; }

        /// <summary> 小于此值为抵挡</summary>
        public int Rate1 { get; set; }

        /// <summary> 大于此值为高档</summary>
        public int Rate2 { get; set; }

        /// <summary> 评分奖励，关联掉落表id</summary>
        public int DropID { get; set; }

    }

    public partial class MapAwardShow
    {
        /// <summary> 展示必定掉落的物品</summary>
        public List<Example.Item> Items { get; set; }

        /// <summary> 展示可能掉落的物品</summary>
        public List<Example.Item> Probability { get; set; }

        /// <summary>奖励描述</summary>
        public string AwardDesc { get; set; }

    }

    public partial class MapResource
    {
        /// <summary>	地图名字</summary>
        public string Name { get; set; }

        /// <summary> 地图图标，在大地图上显示的图标</summary>
        public string Icon { get; set; }

        /// <summary> 副本插图，地图入口图标</summary>
        public string Picture { get; set; }

        /// <summary> 地图loading背景</summary>
        public string Loading { get; set; }

        /// <summary> 副本音乐</summary>
        public string Music { get; set; }

    }

    /// <summary>	地图</summary>
    public partial class MapInfo
    {
        public enum MapType
        {
            /// <summary>	主城</summary>
            MAIN_CITY = 1,
            /// <summary>	野外(普通)</summary>
            FIELD_COMMON = 2,
            /// <summary>	野外(阵营)</summary>
            FIELD_FACTION = 3,
            /// <summary>	门派</summary>
            SCHOOL = 4,
            /// <summary>	副本</summary>
            INSTANTCE = 5,
        }

        public enum InstanceType
        {
            /// <summary>无</summary>
            EMPTY = 0,
            /// <summary>	单人副本</summary>
            SINGLE = 1,
            /// <summary>	小队副本</summary>
            TEAM = 2,
            /// <summary>	阵容副本</summary>
            FACTION = 3,
            /// <summary>	团队副本</summary>
            GROUP = 4,
            /// <summary>	家族副本</summary>
            FAMILY = 5,
            /// <summary>	师徒副本</summary>
            MENTORING = 6,
            /// <summary>	情缘副本</summary>
            LOVE = 7,
        }

        public enum DifficultyType
        {
            /// <summary>普通</summary>
            ORDINARY = 0,
            /// <summary>精英</summary>
            ELITE = 1,
            /// <summary>史诗</summary>
            EPIC = 2,
            /// <summary>传说</summary>
            LEGEND = 3,
        }

        /// <summary>	副本ID</summary>
        public int Id { get; set; }

        /// <summary>	地图类型</summary>
        public Example.MapInfo.MapType mapType { get; set; }

        /// <summary>	MapUnit，MapEvent 的ID</summary>
        public int Unit { get; set; }

        /// <summary>	副本名字</summary>
        public string Name { get; set; }

        /// <summary>	副本描述</summary>
        public string Desc { get; set; }

        /// <summary>	副本类型</summary>
        public Example.MapInfo.InstanceType Type { get; set; }

        /// <summary> 	副本美术资源</summary>
        public Example.MapResource Resource { get; set; }

        /// <summary> 	副本掉落展示</summary>
        public Example.MapAwardShow AwardShow { get; set; }

        /// <summary>	难度</summary>
        public Example.MapInfo.DifficultyType difficultyType { get; set; }

        /// <summary>	推荐战力</summary>
        public int RecommendCapacity { get; set; }

        /// <summary>	副本开启策略</summary>
        public Example.MapOpenPolicy MapOpenPolicy { get; set; }

        /// <summary>	副本进入策略</summary>
        public Example.MapEnterPolicy MapEnterPolicy { get; set; }

        /// <summary>	副本内限制</summary>
        public Example.MapLimit MapLimit { get; set; }

        /// <summary>	助战策略</summary>
        public Example.MapAssistPolicy AssistPolicy { get; set; }

        /// <summary>	副本复活策略</summary>
        public Example.MapRelivePolicy RelivePolicy { get; set; }

        /// <summary>	副本评分策略</summary>
        public Example.MapEvaluatePolicy EvaluatePolicy { get; set; }

        /// <summary>	副本通关策略</summary>
        public Example.MapClearPolicy ClearPolicy { get; set; }

    }

    public partial class MapActivityTime
    {
        /// <summary>开始时间 1300表示为13点，1830表示为18点30分</summary>
        public int StartTime { get; set; }

        /// <summary>结束时间</summary>
        public int EndTime { get; set; }

    }

    public partial class MapActivityNotice
    {
        /// <summary>准备公告ID</summary>
        public int Prepare { get; set; }

        /// <summary>开启公告ID</summary>
        public int Start { get; set; }

        /// <summary>结束公告ID</summary>
        public int Over { get; set; }

    }

    public partial class MapActivity
    {
        public enum EnterPeriodLimit
        {
            NONE = 0,
            EVERYDAY = 1,
            EVERYWEEK = 2,
            EVERYMONTH = 3,
        }

        /// <summary>副本ID</summary>
        public int MapId { get; set; }

        /// <summary>活动名称</summary>
        public int Name { get; set; }

        /// <summary>索引值[1-7]表示周一到周日,数据值bool为是否开启</summary>
        public List<bool> OpenDays { get; set; }

        /// <summary>一天内开启的具体时间</summary>
        public List<Example.MapActivityTime> OpenTimes { get; set; }

        /// <summary>开启间隔，以分钟为单位。</summary>
        public int OpenInterval { get; set; }

        /// <summary>活动准备时间，以分钟为单位</summary>
        public int PrepareTime { get; set; }

        /// <summary>活动公告配置</summary>
        public Example.MapActivityNotice Notice { get; set; }

        /// <summary>重复进入类型限制</summary>
        public Example.MapActivity.EnterPeriodLimit PeroidLimit { get; set; }

        /// <summary> 最大进入次数</summary>
        public int MaxEnterCount { get; set; }

        /// <summary> 最大可购买进入次数</summary>
        public int MaxBuyEnterCount { get; set; }

        /// <summary> 最大可购买进入次数</summary>
        public int EnterBuyPrice { get; set; }

        /// <summary> 无次数是否可进入</summary>
        public bool EnterIngoreCount { get; set; }

        /// <summary> 无次数是否可活动奖励</summary>
        public bool RewardIgnoreCount { get; set; }

    }

    public partial class AllMaps
    {
        public List<Example.MapInfo> Maps { get; set; }

    }

    public partial class AllMapActivities
    {
        public List<Example.MapActivity> Activities { get; set; }

    }

    /// <summary>	基础信息</summary>
    public partial class BaseAtt
    {
        /// <summary>	角色ID		动态</summary>
        public long RoleID { get; set; }

        /// <summary>	名字		动态</summary>
        public string Name { get; set; }

        /// <summary>	职业</summary>
        public int Profession { get; set; }

        /// <summary>	装备信息	动态</summary>
        public Example.EquipmentAtt EquipAtt { get; set; }

        /// <summary>	客户端使用</summary>
        public float Height { get; set; }

        /// <summary>	客户端使用</summary>
        public float EffHeight { get; set; }

        /// <summary> 	头像</summary>
        public string Avatar { get; set; }

        /// <summary> 	等级</summary>
        public int Level { get; set; }

        /// <summary>	客户端使用</summary>
        public float Width { get; set; }

        /// <summary> 客户端用</summary>
        public int Physique { get; set; }

        /// <summary> 客户端用</summary>
        public bool Male { get; set; }

        /// <summary>	命中音效</summary>
        public string HitAudio { get; set; }

        /// <summary>	死亡音效</summary>
        public string DieAudio { get; set; }

    }

    public partial class EquipmentAsset
    {
        public int Id { get; set; }

        /// <summary>静态数据ID</summary>
        public int ResID { get; set; }

        /// <summary>一级属性ID</summary>
        public List<int> PropertyBaseID { get; set; }

        /// <summary>一级属性值</summary>
        public List<int> PropertyBaseValue { get; set; }

        /// <summary>附加属性ID</summary>
        public List<int> PropertyAttachID { get; set; }

        /// <summary>附加属性值</summary>
        public List<int> PropertyAttachValue { get; set; }

        /// <summary>附加属性百分比ID</summary>
        public List<int> PropertyAttachRatioID { get; set; }

        /// <summary>附加属性百分比</summary>
        public List<float> PropertyAttachRatio { get; set; }

        /// <summary>Int特殊属性ID</summary>
        public List<int> PropertySpecialIntID { get; set; }

        /// <summary>Int特殊属性值</summary>
        public List<int> PropertySpecialIntValue { get; set; }

        /// <summary>Float特殊属性ID</summary>
        public List<int> PropertySpecialFloatID { get; set; }

        /// <summary>Float特殊属性值</summary>
        public List<float> PropertySpecialFloatValue { get; set; }

    }

    public partial class EquipmentStrategy
    {
        public List<int> Equips { get; set; }

    }

    public partial class EquipmentAtt
    {
        public List<Example.EquipmentStrategy> EquipStrategy { get; set; }

        public int EquipStrategyActive { get; set; }

        public List<Example.EquipmentAsset> EquipAssets { get; set; }

    }

    /// <summary>	技能动态数据</summary>
    public partial class SkillAsset
    {
        /// <summary>	静态ID</summary>
        public int Id { get; set; }

        /// <summary>	等级</summary>
        public int Level { get; set; }

    }

    public partial class Faction
    {
        public enum FactionType
        {
            /// <summary>	组队</summary>
            TEAM = 0,
            /// <summary>	门派</summary>
            FAMILY = 1,
            SCHOOL = 2,
        }

        public enum FactionRelation
        {
            /// <summary>	友好</summary>
            GREEN = 0,
            /// <summary>	中立</summary>
            YELLOW = 1,
            /// <summary>	敌对</summary>
            RED = 2,
            ONEPHASE = 3,
            INVINCIBLE = 4,
        }

        public List<int> FactionGroup { get; set; }

    }

    /// <summary>	战斗相关的数据</summary>
    public partial class FightAtt
    {
        /// <summary>	角色数值表</summary>
        public Example.PropertyAtt Property { get; set; }

        /// <summary>	当前学的所有技能, 技能index 索引从0开始</summary>
        public List<Example.SkillAsset> Skills { get; set; }

        /// <summary>	阵营</summary>
        public Example.Faction Faction { get; set; }

        /// <summary>	受击半径</summary>
        public float GethitRadius { get; set; }

    }

    /// <summary>	角色数值表</summary>
    public partial class PropertyAtt
    {
        public enum OneProperty
        {
            /// <summary>	体质</summary>
            PHYSIQUE = 0,
            /// <summary>	力量</summary>
            FORCE = 1,
            /// <summary>	敏捷</summary>
            AGILE = 2,
            /// <summary>	灵巧</summary>
            DEFTL = 3,
            /// <summary>	智力</summary>
            INTELLECT = 4,
        }

        public enum TwoProperty
        {
            /// <summary>	生命上限</summary>
            HP = 0,
            /// <summary>	物理攻击</summary>
            PHYSICSATT = 1,
            /// <summary>	物理防御</summary>
            PHYSICSDEF = 2,
            /// <summary>	法术攻击</summary>
            MAGICATT = 3,
            /// <summary>	法术防御</summary>
            MAGICDEF = 4,
            /// <summary>	命中</summary>
            HIT = 5,
            /// <summary>	闪避</summary>
            DODGE = 6,
            /// <summary>	金攻击</summary>
            GOLDATT = 7,
            /// <summary>	木攻击</summary>
            WOODATT = 8,
            /// <summary>	水攻击</summary>
            WATERATT = 9,
            /// <summary>	火攻击</summary>
            FIREATT = 10,
            /// <summary>	土攻击</summary>
            SOILATT = 11,
            /// <summary>	金防守</summary>
            GOLDDEF = 12,
            /// <summary>	木防守</summary>
            WOODDEF = 13,
            /// <summary>	水防守</summary>
            WATERDEF = 14,
            /// <summary>	火防守</summary>
            FIREDEF = 15,
            /// <summary>	土防守</summary>
            SOILDEF = 16,
            /// <summary>	忽视闪避</summary>
            IGNOREDODGE = 17,
            /// <summary>	暴击</summary>
            CRIT = 18,
            /// <summary>	抗暴</summary>
            CRITRES = 19,
            /// <summary>	暴击伤害</summary>
            CRITHURT = 20,
            /// <summary>	抗暴免伤</summary>
            CRITEXE = 21,
            /// <summary>	生命恢复</summary>
            HPRECOVER = 22,
            /// <summary>	魔法上限</summary>
            MP = 23,
            /// <summary>	魔法恢复</summary>
            MPRECOVER = 24,
            /// <summary>	怒气上限</summary>
            ANGER_MAX = 25,
            /// <summary>	初始怒气</summary>
            ANGER_INIT = 26,
            /// <summary>	攻击	追加到物理攻击和法术攻击之后</summary>
            ATTACK = 27,
            /// <summary>	防御	追加到物理防御和法术防御之后</summary>
            DEFEND = 28,
        }

        public enum SpecialInt
        {
            /// <summary>	额外直接伤害</summary>
            ADDED_HURT = 0,
            /// <summary>	所有1级属性</summary>
            ALL_ONELV = 1,
            /// <summary>	全系元素攻击</summary>
            FL_ATTACK = 2,
            /// <summary>	全系元素防御</summary>
            FL_DEFEND = 3,
            /// <summary>	治疗增强</summary>
            TREATMENT_ENHANCE = 4,
            /// <summary>	韧性</summary>
            TENACITY = 5,
        }

        public enum SpecialFloat
        {
            /// <summary>	移动速度</summary>
            MOVE_SPEED = 0,
            /// <summary>	攻击速度</summary>
            ATTACK_SPEED = 1,
            /// <summary>	吸取生命</summary>
            DRAWHP = 2,
            /// <summary>	反弹伤害</summary>
            REBOUND_HURT = 3,
            /// <summary>	附加命中率百分比</summary>
            ATTACH_HITRATE = 4,
            /// <summary>	附加暴击率百分比</summary>
            ATTACH_CRITRATE = 5,
            /// <summary>	附加暴击倍数百分比</summary>
            ATTACH_CRITMULTIPLE = 6,
            /// <summary>	金免伤</summary>
            GOLD_MISS_HURT = 7,
            /// <summary>	木免伤</summary>
            WOOD_MISS_HURT = 8,
            /// <summary>	水免伤</summary>
            WATER_MISS_HURT = 9,
            /// <summary>	火免伤</summary>
            FIRE_MISS_HURT = 10,
            /// <summary>	土免伤</summary>
            SOIL_MISS_HURT = 11,
            /// <summary>	金追伤</summary>
            GOLD_ADD_HURT = 12,
            /// <summary>	木追伤</summary>
            WOOD_ADD_HURT = 13,
            /// <summary>	水追伤</summary>
            WATER_ADD_HURT = 14,
            /// <summary>	火追伤</summary>
            FIRE_ADD_HURT = 15,
            /// <summary>	土追伤</summary>
            SOIL_ADD_HURT = 16,
            /// <summary>	治疗增强</summary>
            TREATMENT_ENHANCE_RATIO = 17,
        }

        /// <summary>	体力当前值</summary>
        public int Hp { get; set; }

        /// <summary>	魔法当前值</summary>
        public int Mana { get; set; }

        /// <summary>	愤怒当前值</summary>
        public int Anger { get; set; }

        /// <summary>	初始数值表的索引</summary>
        public int Id { get; set; }

        /// <summary>	一级属性列表-值</summary>
        public List<int> OnePropertyBasic { get; set; }

        /// <summary>
        /// <para>	100000</para>
        /// <para>	一级属性列表-百分比</para>
        /// </summary>
        public List<float> OnePropertyRatio { get; set; }

        /// <summary>
        /// <para>	110000</para>
        /// <para>	一级属性列表-附加值</para>
        /// </summary>
        public List<int> OnePropertyAttach { get; set; }

        /// <summary>
        /// <para>	120000</para>
        /// <para>	二级属性列表-值</para>
        /// </summary>
        public List<int> TwoPropertyBasic { get; set; }

        /// <summary>
        /// <para>	130000</para>
        /// <para>	二级属性列表-百分比</para>
        /// </summary>
        public List<float> TwoPropertyRatio { get; set; }

        /// <summary>
        /// <para>	140000</para>
        /// <para>	二级属性列表-附加值</para>
        /// </summary>
        public List<int> TwoPropertyAttach { get; set; }

        /// <summary>
        /// <para>	150000</para>
        /// <para>	二级属性列表-全局百分比</para>
        /// </summary>
        public List<float> TwoPropertyGloblRatio { get; set; }

        /// <summary>
        /// <para>	160000</para>
        /// <para>	特殊数值列表-数值</para>
        /// </summary>
        public List<int> SpecialIntList { get; set; }

        /// <summary>
        /// <para>	170000</para>
        /// <para>	特殊属性列表-百分比</para>
        /// </summary>
        public List<float> SpecialFloatList { get; set; }

        /// <summary>
        /// <para>	180000</para>
        /// <para>	一级属性初值</para>
        /// </summary>
        public List<int> OnePropertyInit { get; set; }

        /// <summary>
        /// <para>	190000</para>
        /// <para>	一级属性成长</para>
        /// </summary>
        public List<int> OnePropertyGrowUp { get; set; }

    }

    /// <summary>	属性对应</summary>
    public partial class PropertyMapping
    {
        /// <summary>	职业ID</summary>
        public int Pid { get; set; }

        /// <summary>	一级属性id</summary>
        public int Oneid { get; set; }

        /// <summary>	二级属性-ID</summary>
        public List<int> Twoids { get; set; }

        /// <summary>	二级属性-值</summary>
        public List<int> Twovalues { get; set; }

    }

    /// <summary>	属性对应表</summary>
    public partial class AllPropertyMapping
    {
        public List<Example.PropertyMapping> Maps { get; set; }

    }

    /// <summary>	初始数值表</summary>
    public partial class AllPropertyAtts
    {
        public List<Example.PropertyAtt> Atts { get; set; }

        public Example.AllStringID StringID { get; set; }

    }

    public partial class MovementAtt
    {
        /// <summary>	角色上次位置</summary>
        public Example.Vector3f Position { get; set; }

        /// <summary>	奔跑速度</summary>
        public float RunSpeed { get; set; }

        /// <summary> 角度，欧拉</summary>
        public Example.Vector3f Rotation { get; set; }

    }

    public partial class AIAtt
    {
        /// <summary>
        /// <para>	Interval 毫秒</para>
        /// <para>	移动的最小间隔</para>
        /// </summary>
        public int MoveInterval { get; set; }

        /// <summary>	移动半径</summary>
        public float MoveRadius { get; set; }

        /// <summary>	攻击的最小间隔</summary>
        public int AttackInterval { get; set; }

        /// <summary>	每隔指定毫秒一次Update</summary>
        public int ThinkInterval { get; set; }

        /// <summary>	警戒间隔时间</summary>
        public int SearchInterval { get; set; }

        /// <summary>	警戒半径</summary>
        public float SearchRadius { get; set; }

        /// <summary>	对应Lua脚本名字</summary>
        public string ScriptName { get; set; }

        /// <summary>	可旋转角度</summary>
        public float RotateAngle { get; set; }

    }

    public partial class StringID
    {
        public string Id { get; set; }

    }

    public partial class AllStringID
    {
        /// <summary>	索引为id</summary>
        public List<Example.StringID> Ids { get; set; }

    }

    public partial class NPCAtt
    {
        public enum Type
        {
            /// <summary>	小怪</summary>
            CRITTERS = 0,
            BOSS = 1,
            /// <summary> 机关</summary>
            ORGAN = 2,
        }

        /// <summary>	动态ID	一般情况是 MapUnit ->　npcs 的索引</summary>
        public int Id { get; set; }

        public Example.NPCAtt.Type type { get; set; }

        public Example.BaseAtt BaseAtt { get; set; }

        public Example.FightAtt FightAtt { get; set; }

        public Example.MovementAtt MovementAtt { get; set; }

        public Example.AIAtt AiAtt { get; set; }

        /// <summary>	初始属性表索引</summary>
        public int PropertyID { get; set; }

        public int NpcID { get; set; }

        public int NpcGroupId { get; set; }

        public Example.MapAnimation BornAnimation { get; set; }

        public Example.MapAnimation DieAnimation { get; set; }

        /// <summary>对话组ID</summary>
        public int DialogGroupID { get; set; }

    }

    public partial class NPCFuncParam
    {
        public int IntValue { get; set; }

        public float FloatValue { get; set; }

        public string StrValue { get; set; }

        public Example.Vector3f VecValue { get; set; }

    }

    public partial class NPCFunc
    {
        public enum Type
        {
            NONE = 0,
            MAP_ENTRY_POINT = 1,
            /// <summary>副本入口</summary>
            TASK = 2,
            /// <summary>任务</summary>
            SHOP = 3,
            /// <summary>商店</summary>
            SCENE_TRANSFER = 4,
        }

        /// <summary>
        /// <para>切换场景</para>
        /// <para>	功能类型</para>
        /// </summary>
        public Example.NPCFunc.Type type { get; set; }

        /// <summary>	功能ID</summary>
        public int Id { get; set; }

        /// <summary>  功能参数</summary>
        public List<Example.NPCFuncParam> Params { get; set; }

    }

    public partial class AllNPCs
    {
        public List<Example.NPCAtt> Npcs { get; set; }

        public Example.AllStringID StringID { get; set; }

    }

    public partial class AllNPCFuncs
    {
        public List<Example.NPCFunc> Datas { get; set; }

    }

    public partial class Event
    {
        public enum EventType
        {
            NONE = 0,
            TRIGGERIN = 1,
            TRIGGEROUT = 2,
            NPCDIE = 3,
        }

    }

    public partial class EventCondition
    {
        public Example.Event.EventType EventType { get; set; }

        public List<int> Condition { get; set; }

    }

    public partial class EventData
    {
        public Example.EventCondition EventCondition { get; set; }

        public int Data { get; set; }

        public Example.EventCondition CompleteEvent { get; set; }

    }

    /// <summary>	地图道具</summary>
    public partial class MapItem
    {
        /// <summary>	地图上道具的唯一ID				服务器可用	2017-03-30</summary>
        public int Id { get; set; }

        /// <summary>	计数器							服务器可用	2017-03-30				需要进一步明确</summary>
        public int RequiredKey { get; set; }

        /// <summary>	地图上的位置					服务器可用	2017-03-30</summary>
        public Example.Vector3f Center { get; set; }

        /// <summary>	触发区域						服务器可用	2017-03-30</summary>
        public Example.Vector3f Size { get; set; }

        /// <summary>	资源路径</summary>
        public string Path { get; set; }

    }

    public partial class MapWall
    {
        /// <summary>	地图上空气墙的唯一ID				服务器可用	2017-03-30</summary>
        public int Id { get; set; }

        /// <summary>	计数器								服务器可用	2017-03-30				需要进一步明确</summary>
        public int RequiredKey { get; set; }

        /// <summary>	地图上的位置						服务器可用	2017-03-30</summary>
        public Example.Vector3f Center { get; set; }

        /// <summary>	触发区域							服务器可用	2017-03-30</summary>
        public Example.Vector3f Size { get; set; }

        /// <summary>	空气墙的朝向						服务器可用	2017-03-30</summary>
        public Example.Vector3f Rotation { get; set; }

        /// <summary>	一进副本就显示出来					服务器可用	2017-03-30</summary>
        public bool Autoshow { get; set; }

        /// <summary>	资源路径</summary>
        public string EffectPath { get; set; }

    }

    public partial class MapAudioSource
    {
        public int Id { get; set; }

        public string Path { get; set; }

        public Example.Vector3f Pos { get; set; }

        public bool Autoshow { get; set; }

        public float MinDistance { get; set; }

        public float MaxDistance { get; set; }

        public float Volume { get; set; }

        public int Loop { get; set; }

        public int RolloffMode { get; set; }

    }

    public partial class ContentValue
    {
        public bool BoolValue { get; set; }

        public int IntValue { get; set; }

        public string StrValue { get; set; }

        public float FloatValue { get; set; }

        public Example.Vector3f Vector3Value { get; set; }

    }

    /// <summary>	地图事件Action</summary>
    public partial class MapEventAction
    {
        public enum Type
        {
            UNKNOWN = 0,
            /// <summary>	清空空气墙			服务器可用	2017-03-30</summary>
            CLEARWALL = 1,
            /// <summary>	掉落道具			服务器可用	2017-03-30</summary>
            DROP_ITEM = 2,
            SHOW_PICKUP = 3,
            HIDE_PICKUP = 4,
            /// <summary>	显示需要的道具		服务器可用	2017-03-30</summary>
            SHOW_USEITEM = 5,
            /// <summary>	隐藏需要的道具		服务器可用	2017-03-30</summary>
            HIDE_USEITEM = 6,
            DESTROY_TRIGGER = 7,
            RESET_TRIGGER = 8,
            /// <summary>	显示空气墙			服务器可用	2017-03-30</summary>
            SHOW_WALL = 9,
            /// <summary>	打开NPC组			服务器可用	2017-03-30</summary>
            OPEN_NPC_GROUP = 10,
            /// <summary>	播放剧情</summary>
            PLAY_SEQUENCE = 11,
            SHOW_UI = 12,
            HIDE_UI = 13,
            /// <summary>	显示路径点			服务器可用	2017-03-30</summary>
            SHOW_WAYPOINT = 14,
            /// <summary>	启动自动战斗</summary>
            START_AUTOFIGHT = 15,
            /// <summary>	关闭自动战斗</summary>
            STOP_AUTOFIGHT = 16,
            /// <summary>	加BUFF				服务器可用	2017-03-30</summary>
            ADD_BUFF = 17,
            /// <summary>	改变阵营			服务器可用	2017-03-30</summary>
            CHANGE_FRACTION = 18,
            /// <summary>	播放动作</summary>
            PLAY_ACTION = 19,
            /// <summary>	移动到某个点		服务器可用	2017-03-30</summary>
            MOVE_TO = 20,
            SHOW_TALK_WORD = 21,
            /// <summary>	关闭助战			服务器可用	2017-03-30</summary>
            FREEZE_AI = 22,
            /// <summary>	进入到了某个BOSS的警戒区域</summary>
            SET_ASBOSS = 23,
            /// <summary>	删除BUFF			服务器可用	2017-03-30</summary>
            DEL_BUFF = 24,
            ACCEPT_TASK = 25,
            SUBMIT_TASK = 26,
            GET_NPCFUNCS = 27,
            FLY_TO = 28,
            PLAY_EFFECT = 29,
            TRANSFER_TO = 30,
            SHOW_TRANSFER = 31,
            HIDE_TRANSFER = 32,
            EXECUTE_EVENT = 33,
            SHOW_PROP_UI = 34,
            CAMERA_SETTING = 35,
            PLAY_SKILL = 36,
            REGULAR_FLY = 38,
            ACTIVE_GAMEOBJECT = 39,
            BRAKE_GAMEOBJECT = 40,
            STOP_MOVE = 41,
            CHANGE_AUDIO = 42,
            OPEN_MUSIC = 43,
            STOP_MUSIC = 45,
            RESET_TASK = 46,
            BEGIN_GUIDE = 47,
            CLEAN_MAP = 48,
            SUBMIT_DUNGENON = 49,
        }

        /// <summary>	目标</summary>
        public string Target { get; set; }

        /// <summary>	类型</summary>
        public Example.MapEventAction.Type ActionType { get; set; }

        /// <summary>	参数</summary>
        public List<Example.ContentValue> Args { get; set; }

        /// <summary>	延迟时间</summary>
        public int DelayTime { get; set; }

    }

    /// <summary>	地图事件条件</summary>
    public partial class MapEventCondition
    {
        public enum Condition
        {
            UNKNOWN = 0,
            /// <summary>	相等</summary>
            EQUAL = 1,
            /// <summary>	不相等</summary>
            EQUAL_NOT = 2,
            /// <summary>	大</summary>
            BIGGER = 3,
            /// <summary>	小</summary>
            LITTLE = 4,
            /// <summary>	大于等于</summary>
            BIGGER_EQUAL = 5,
            /// <summary>	小于等于</summary>
            LITTLE_EQUAL = 6,
            /// <summary>	包含</summary>
            CONTAIN = 7,
            /// <summary>	不包含</summary>
            NOT_CONTAIN = 8,
            /// <summary>	或</summary>
            COMPOSITE_OR = 9,
            /// <summary>	与</summary>
            COMPOSITE_AND = 9,
        }

        /// <summary>	条件类型</summary>
        public Example.MapEventCondition.Condition Type { get; set; }

        public string Name { get; set; }

        /// <summary>	参数1</summary>
        public Example.ContentValue Arg1 { get; set; }

        /// <summary>	参数2	目前只用了这个参数	2017-03-30</summary>
        public Example.ContentValue Arg2 { get; set; }

        /// <summary>	暂时没有用到				2017-03-30</summary>
        public List<Example.MapEventCondition> Composites { get; set; }

    }

    /// <summary>	地图事件</summary>
    public partial class MapEvent
    {
        public enum SendType
        {
            /// <summary>	单播</summary>
            SELF = 0,
            /// <summary>	队伍</summary>
            TEAM = 1,
            /// <summary>	广播-场景内</summary>
            SCENE = 2,
        }

        public int Id { get; set; }

        public int EventType { get; set; }

        public string Target { get; set; }

        /// <summary>	地图事件触发的条件判断</summary>
        public List<Example.MapEventCondition> Conditions { get; set; }

        /// <summary>	地图事件执行的指令</summary>
        public List<Example.MapEventAction> Actions { get; set; }

        /// <summary>	可执行次数</summary>
        public int ExecuteCount { get; set; }

        /// <summary>	是否拦截消息的传递</summary>
        public bool Interception { get; set; }

        /// <summary>	发送类型</summary>
        public Example.MapEvent.SendType sendType { get; set; }

    }

    /// <summary>	触发器</summary>
    public partial class MapActionTrigger
    {
        public enum Type
        {
            UNKNOWN = 0,
            ENTER_TRIGGER = 1,
            OUT_TRIGGER = 2,
            BORN = 3,
            DEAD = 4,
            PICKUP = 5,
            USE_ITEM = 6,
            ATTACK = 7,
            BEHIT = 8,
            ENTER_SCENE = 9,
            LEAVE_SCENE = 10,
            DICE_RESULT = 11,
            STORY_OVER = 12,
            DICE_WINNER = 13,
            DROP_HP_TO = 14,
            TASK_STATUS_UPDATE = 15,
            INIT_SCENE = 16,
            DESTROY_SCENE = 17,
            CALL = 1000,
        }

        public int Id { get; set; }

        public Example.MapActionTrigger.Type EventType { get; set; }

        public string Target { get; set; }

        public Example.ContentValue Value { get; set; }

        public int TriggerEventId { get; set; }

        public List<Example.MapEventAction> Actions { get; set; }

    }

    public partial class MapEntityEvent
    {
        public enum Type
        {
            UNKNOWN_TYPE = 0,
            PLAYER = 1,
            NPC = 2,
            ITEM = 3,
            WALL = 4,
            TRIGGER = 5,
            TEAM = 6,
            NPCGROUP = 7,
        }

        public int TargetId { get; set; }

        public Example.MapEntityEvent.Type TargetType { get; set; }

        public List<Example.MapActionTrigger> Triggers { get; set; }

    }

    /// <summary>	关于地图范围的地图事件</summary>
    public partial class MapTrigger
    {
        public enum Type
        {
            UNKNOWN_TYPE = 0,
            EVENT = 1,
            AREA = 2,
        }

        public enum Shape
        {
            UNKNOWN_SHAPE = 0,
            CIRCLE = 1,
            BOX = 2,
        }

        public int Id { get; set; }

        public Example.MapTrigger.Type type { get; set; }

        public Example.MapTrigger.Shape shape { get; set; }

        public string Data { get; set; }

        public Example.Vector3f Center { get; set; }

        public float Radius { get; set; }

        public Example.Vector3f Size { get; set; }

        public Example.Vector3f Rotation { get; set; }

        public List<Example.MapEventAction> InActions { get; set; }

        public List<Example.MapEventAction> OutActions { get; set; }

        public string ObjPath { get; set; }

        public bool AutoShow { get; set; }

    }

    public partial class MapArea
    {
        public enum Type
        {
            EARTH = 0,
            WOOD = 1,
            ROCK = 2,
            GRASS = 3,
            WATER = 4,
            METAL = 5,
        }

        public enum Shape
        {
            UNKNOWN_SHAPE = 0,
            CIRCLE = 1,
            BOX = 2,
        }

        public int Id { get; set; }

        public Example.MapArea.Type type { get; set; }

        public Example.MapArea.Shape shape { get; set; }

        public Example.Vector3f Center { get; set; }

        public float Radius { get; set; }

        public Example.Vector3f Size { get; set; }

        public Example.Vector3f Rotation { get; set; }

        public string Audio { get; set; }

    }

    public partial class MapTile
    {
        public Example.MapArea.Type Type { get; set; }

    }

    public partial class MapTiles
    {
        public int Row { get; set; }

        public int Column { get; set; }

        public float CellSize { get; set; }

        public Example.Vector3f Pos { get; set; }

        public List<int> Tiles { get; set; }

    }

    public partial class MapObject
    {
        public enum Type
        {
            UNKNOWN = 0,
            WALL = 1,
            TRIGGER = 2,
            TRANSFER = 3,
            NAVPATH = 4,
            GAMEOBJECT = 5,
        }

        public enum Status
        {
            DISABLE = 0,
            ENABLE = 1,
        }

        public Example.MapObject.Type type { get; set; }

        public int Id { get; set; }

        public string Name { get; set; }

        public Example.MapObject.Status status { get; set; }

    }

    public partial class MapEventData
    {
        public List<Example.MapWall> Walls { get; set; }

        public List<Example.MapEvent> Events { get; set; }

        public List<Example.MapTrigger> Triggers { get; set; }

        public List<Example.MapEntityEvent> EntityEvents { get; set; }

        public List<Example.MapItem> Items { get; set; }

        public List<Example.MapAudioSource> AudioSources { get; set; }

        public List<Example.MapArea> Areas { get; set; }

    }

    public partial class EffectConfig
    {
        public enum LifeTime
        {
            AUTO = 0,
            GLOBAL = 1,
        }

        public enum PosType
        {
            FEET = 0,
            BODY = 1,
            HEAD = 2,
            BONE = 3,
            RELATIVE = 4,
            WORLD = 5,
        }

        public int Id { get; set; }

        public string EffectName { get; set; }

        public Example.EffectConfig.PosType posType { get; set; }

        public Example.Vector3f Position { get; set; }

        public string BoneName { get; set; }

        public Example.EffectConfig.LifeTime lifeTime { get; set; }

    }

    /// <summary>	所有状态</summary>
    public partial class AllEffectConfig
    {
        public List<Example.EffectConfig> Effects { get; set; }

        public Example.AllStringID StringID { get; set; }

    }

    public partial class StateMachineValue
    {
        public enum ValueType
        {
            INTEGER = 0,
            FLOAT = 1,
            BOOLEAN = 2,
        }

        public Example.StateMachineValue.ValueType valueType { get; set; }

        public int IntValue { get; set; }

        public int FloatValue { get; set; }

        public bool BoolValue { get; set; }

    }

    public partial class StateMachineParam
    {
        public enum ValueType
        {
            INTEGER = 0,
            FLOAT = 1,
            BOOLEAN = 2,
            TRIGGER = 3,
        }

        public string Name { get; set; }

        public Example.StateMachineParam.ValueType valueType { get; set; }

        public int IntValue { get; set; }

        public float FloatValue { get; set; }

        public bool BoolValue { get; set; }

    }

    public partial class StateMachineAction
    {
        public enum ActionType
        {
            NONE = 0,
            AUTO_FIGHT = 1,
            EXECUTE_TASK = 2,
        }

        public int Id { get; set; }

        public Example.StateMachineAction.ActionType actionType { get; set; }

        public List<Example.StateMachineValue> Argments { get; set; }

    }

    public partial class StateMachineTransactionCondition
    {
        public enum ConditionType
        {
            EQUAL = 0,
            NOT_EQUAL = 1,
            GREATER = 2,
            LESS = 3,
            TRIGGER = 4,
            IF_NOT = 5,
            IF = 6,
        }

        public string What { get; set; }

        public Example.StateMachineTransactionCondition.ConditionType Type { get; set; }

        public float Value { get; set; }

    }

    public partial class StateMachineTransaction
    {
        public int Id { get; set; }

        public List<Example.StateMachineTransactionCondition> Conditions { get; set; }

        public int FromState { get; set; }

        public int ToState { get; set; }

        public int ExitTime { get; set; }

        public bool IsExit { get; set; }

        public bool IsMute { get; set; }

        public bool IsSolo { get; set; }

    }

    public partial class StateMachineNode
    {
        public int Id { get; set; }

        public int StateType { get; set; }

        public string StateName { get; set; }

        public List<int> Transactions { get; set; }

        public int ChildStateMachine { get; set; }

        public List<string> EnterActions { get; set; }

        public List<string> ExitActions { get; set; }

        public string ScriptName { get; set; }

        public int Duration { get; set; }

    }

    public partial class StateMachine
    {
        public int Id { get; set; }

        public List<Example.StateMachineParam> Params { get; set; }

        public List<Example.StateMachineNode> States { get; set; }

        public List<Example.StateMachineTransaction> Transactions { get; set; }

        public int DefaultState { get; set; }

        public string Name { get; set; }

    }

    public partial class StateMachineData
    {
        public List<Example.StateMachine> StateMachines { get; set; }

        public int RootStateMachine { get; set; }

    }

}
